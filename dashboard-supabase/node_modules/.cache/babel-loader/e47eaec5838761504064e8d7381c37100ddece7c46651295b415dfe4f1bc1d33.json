{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eduar\\\\OneDrive\\\\Documentos\\\\Projetos\\\\PROJETOS\\\\dashboard_Corazza\\\\dashboard-supabase\\\\src\\\\components\\\\Charts\\\\BrokerChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { supabase } from '../../services/supabase';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst BrokerChart = () => {\n  _s();\n  const [data, setData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Leads por Corretor',\n      data: [],\n      backgroundColor: 'rgba(75, 192, 192, 0.6)'\n    }]\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data: leadsData,\n        error\n      } = await supabase.from('Cadastro_Clientes').select('corretor_responsavel');\n      if (error) {\n        console.error('Error fetching data:', error);\n        return;\n      }\n\n      // Agrupar dados manualmente\n      const grouped = leadsData === null || leadsData === void 0 ? void 0 : leadsData.reduce((acc, item) => {\n        const corretor = item.corretor_responsavel;\n        if (!acc[corretor]) {\n          acc[corretor] = 0;\n        }\n        acc[corretor]++;\n        return acc;\n      }, {});\n      const brokerData = Object.entries(grouped || {}).map(([corretor_responsavel, count]) => ({\n        corretor_responsavel,\n        count: count\n      }));\n      const labels = brokerData.map(item => item.corretor_responsavel);\n      const counts = brokerData.map(item => item.count);\n      setData({\n        labels,\n        datasets: [{\n          label: 'Leads por Corretor',\n          data: counts,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)'\n        }]\n      });\n    };\n    fetchData();\n\n    // Realtime subscription com nova sintaxe do Supabase v2\n    const channel = supabase.channel('broker-changes').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'Cadastro_Clientes'\n    }, () => {\n      fetchData();\n    }).subscribe();\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contagem de Leads por Corretor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(BrokerChart, \"KB59K7n65CLcHxbWT/J1WZBuiG8=\");\n_c = BrokerChart;\nexport default BrokerChart;\nvar _c;\n$RefreshReg$(_c, \"BrokerChart\");","map":{"version":3,"names":["React","useEffect","useState","supabase","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","BrokerChart","_s","data","setData","labels","datasets","label","backgroundColor","fetchData","leadsData","error","from","select","console","grouped","reduce","acc","item","corretor","corretor_responsavel","brokerData","Object","entries","map","count","counts","channel","on","event","schema","table","subscribe","removeChannel","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/eduar/OneDrive/Documentos/Projetos/PROJETOS/dashboard_Corazza/dashboard-supabase/src/components/Charts/BrokerChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { supabase } from '../../services/supabase';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ChartData } from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\ninterface BrokerData {\r\n    corretor_responsavel: string;\r\n    count: number;\r\n}\r\n\r\nconst BrokerChart: React.FC = () => {\r\n    const [data, setData] = useState<ChartData<'bar'>>({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Leads por Corretor',\r\n                data: [],\r\n                backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n            },\r\n        ],\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const { data: leadsData, error } = await supabase\r\n                .from('Cadastro_Clientes')\r\n                .select('corretor_responsavel');\r\n\r\n            if (error) {\r\n                console.error('Error fetching data:', error);\r\n                return;\r\n            }\r\n\r\n            // Agrupar dados manualmente\r\n            const grouped = leadsData?.reduce((acc: Record<string, number>, item: any) => {\r\n                const corretor = item.corretor_responsavel;\r\n                if (!acc[corretor]) {\r\n                    acc[corretor] = 0;\r\n                }\r\n                acc[corretor]++;\r\n                return acc;\r\n            }, {});\r\n\r\n            const brokerData: BrokerData[] = Object.entries(grouped || {}).map(([corretor_responsavel, count]) => ({\r\n                corretor_responsavel,\r\n                count: count as number\r\n            }));\r\n\r\n            const labels = brokerData.map((item: BrokerData) => item.corretor_responsavel);\r\n            const counts = brokerData.map((item: BrokerData) => item.count);\r\n\r\n            setData({\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label: 'Leads por Corretor',\r\n                        data: counts,\r\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n                    },\r\n                ],\r\n            });\r\n        };\r\n\r\n        fetchData();\r\n\r\n        // Realtime subscription com nova sintaxe do Supabase v2\r\n        const channel = supabase\r\n            .channel('broker-changes')\r\n            .on('postgres_changes', \r\n                { event: 'INSERT', schema: 'public', table: 'Cadastro_Clientes' },\r\n                () => {\r\n                    fetchData();\r\n                }\r\n            )\r\n            .subscribe();\r\n\r\n        return () => {\r\n            supabase.removeChannel(channel);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Contagem de Leads por Corretor</h2>\r\n            <Bar data={data} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BrokerChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}