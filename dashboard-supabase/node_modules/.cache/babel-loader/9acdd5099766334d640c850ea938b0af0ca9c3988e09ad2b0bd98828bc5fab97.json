{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eduar\\\\OneDrive\\\\Documentos\\\\Projetos\\\\PROJETOS\\\\dashboard_Corazza\\\\dashboard-supabase\\\\src\\\\components\\\\Charts\\\\LeadsChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { supabase } from '../../services/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LeadsChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Leads por Empreendimento',\n      data: [],\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      fill: true\n    }]\n  });\n  const fetchLeadsData = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('Cadastro_Clientes').select('empreendimento, count(*)').group('empreendimento');\n    if (error) {\n      console.error('Erro ao buscar dados de Leads:', error);\n      return;\n    }\n    const labels = (data === null || data === void 0 ? void 0 : data.map(item => item.empreendimento)) || [];\n    const values = (data === null || data === void 0 ? void 0 : data.map(item => item.count)) || [];\n    setChartData({\n      labels,\n      datasets: [{\n        label: 'Leads por Empreendimento',\n        data: values,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        fill: true\n      }]\n    });\n  };\n  useEffect(() => {\n    fetchLeadsData();\n    const subscription = supabase.from('Cadastro_Clientes').on('INSERT', () => {\n      fetchLeadsData();\n    }).subscribe();\n    return () => {\n      supabase.removeSubscription(subscription);\n    };\n  }, []);\n  const options = {\n    responsive: true,\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leads por Empreendimento\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(LeadsChart, \"UVloxAy58s5e+cpFaD8fnRXHBLY=\");\n_c = LeadsChart;\nexport default LeadsChart;\nvar _c;\n$RefreshReg$(_c, \"LeadsChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","supabase","jsxDEV","_jsxDEV","LeadsChart","_s","chartData","setChartData","labels","datasets","label","data","borderColor","backgroundColor","fill","fetchLeadsData","error","from","select","group","console","map","item","empreendimento","values","count","subscription","on","subscribe","removeSubscription","options","responsive","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/eduar/OneDrive/Documentos/Projetos/PROJETOS/dashboard_Corazza/dashboard-supabase/src/components/Charts/LeadsChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { supabase } from '../../services/supabase';\r\nimport { ChartData, ChartOptions } from 'chart.js';\r\n\r\nconst LeadsChart: React.FC = () => {\r\n    const [chartData, setChartData] = useState<ChartData<'line'>>({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Leads por Empreendimento',\r\n                data: [],\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                fill: true,\r\n            },\r\n        ],\r\n    });\r\n\r\n    const fetchLeadsData = async () => {\r\n        const { data, error } = await supabase\r\n            .from('Cadastro_Clientes')\r\n            .select('empreendimento, count(*)')\r\n            .group('empreendimento');\r\n\r\n        if (error) {\r\n            console.error('Erro ao buscar dados de Leads:', error);\r\n            return;\r\n        }\r\n\r\n        const labels = data?.map((item) => item.empreendimento) || [];\r\n        const values = data?.map((item) => item.count) || [];\r\n\r\n        setChartData({\r\n            labels,\r\n            datasets: [\r\n                {\r\n                    label: 'Leads por Empreendimento',\r\n                    data: values,\r\n                    borderColor: 'rgba(75, 192, 192, 1)',\r\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                    fill: true,\r\n                },\r\n            ],\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLeadsData();\r\n\r\n        const subscription = supabase\r\n            .from('Cadastro_Clientes')\r\n            .on('INSERT', () => {\r\n                fetchLeadsData();\r\n            })\r\n            .subscribe();\r\n\r\n        return () => {\r\n            supabase.removeSubscription(subscription);\r\n        };\r\n    }, []);\r\n\r\n    const options: ChartOptions<'line'> = {\r\n        responsive: true,\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Leads por Empreendimento</h2>\r\n            <Line data={chartData} options={options} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeadsChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,QAAQ,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAoB;IAC1DS,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,0BAA0B;MACjCC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,yBAAyB;MAC1CC,IAAI,EAAE;IACV,CAAC;EAET,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAM;MAAEJ,IAAI;MAAEK;IAAM,CAAC,GAAG,MAAMf,QAAQ,CACjCgB,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC,0BAA0B,CAAC,CAClCC,KAAK,CAAC,gBAAgB,CAAC;IAE5B,IAAIH,KAAK,EAAE;MACPI,OAAO,CAACJ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD;IACJ;IAEA,MAAMR,MAAM,GAAG,CAAAG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,cAAc,CAAC,KAAI,EAAE;IAC7D,MAAMC,MAAM,GAAG,CAAAb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACG,KAAK,CAAC,KAAI,EAAE;IAEpDlB,YAAY,CAAC;MACTC,MAAM;MACNC,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,0BAA0B;QACjCC,IAAI,EAAEa,MAAM;QACZZ,WAAW,EAAE,uBAAuB;QACpCC,eAAe,EAAE,yBAAyB;QAC1CC,IAAI,EAAE;MACV,CAAC;IAET,CAAC,CAAC;EACN,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZiB,cAAc,CAAC,CAAC;IAEhB,MAAMW,YAAY,GAAGzB,QAAQ,CACxBgB,IAAI,CAAC,mBAAmB,CAAC,CACzBU,EAAE,CAAC,QAAQ,EAAE,MAAM;MAChBZ,cAAc,CAAC,CAAC;IACpB,CAAC,CAAC,CACDa,SAAS,CAAC,CAAC;IAEhB,OAAO,MAAM;MACT3B,QAAQ,CAAC4B,kBAAkB,CAACH,YAAY,CAAC;IAC7C,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,OAA6B,GAAG;IAClCC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,WAAW,EAAE;MACjB;IACJ;EACJ,CAAC;EAED,oBACI/B,OAAA;IAAAgC,QAAA,gBACIhC,OAAA;MAAAgC,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCpC,OAAA,CAACH,IAAI;MAACW,IAAI,EAAEL,SAAU;MAACwB,OAAO,EAAEA;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd,CAAC;AAAClC,EAAA,CAxEID,UAAoB;AAAAoC,EAAA,GAApBpC,UAAoB;AA0E1B,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}